// api/comments/eventId

import { MongoClient } from 'mongodb';

import { connectDatabase, getDocumentsWithEventID, getAllDocuments, insertDocument } from '../../../helpers/db-util'

async function handler(req, res){

    // retrieve eventId value from query
    const eventId = req.query.eventId;

    let client;
    try {
        // connecting to events database in our MongoDB cluster
        client = await connectDatabase();
    } catch(error){

        res.status(500).json({message: 'Connecting to the database failed!'})
        return;
    }
    
        


    // We only expect POST or GET requests with this particular function
    if(req.method === 'POST'){
        
        const email = req.body.email;
        const name = req.body.name;
        const text = req.body.text;

        // add server-side vaidation 
        if(!email.includes('@') || !name || name.trim() === '' || !text || text.trim() === ''){
            
            res.status(422).json({ message: 'Invalid input.'});
            // disconnects from the client 
            client.close();
            return;
        }

        // TODO: add comment to backend/ database 
        console.log('email= ', email, ' name= ', name, ' text= ', text);
        const newComment = {
            email,
            name,
            text,
            eventId

        }
        console.log('comment= ', newComment);

        let result;
        try{
            result = await insertDocument(client, 'comments', newComment)
             // unique id generated by MongoDB
            newComment._id = result.insertedId;
            // send back successful status with a message 
            res.status(201).json({ message: 'Added comment', comment: newComment});
        } catch (error){
            res.status(500).json({message: "Could not insert comment into the comments databse"})
        }

        
       

    }

    if(req.method === 'GET'){

        let documents;
       try {
            // retrieve comments for the event with id = eventId
            documents = await getDocumentsWithEventID(client, 'comments', {id_: -1}, {eventId: eventId})
            // retrieve all of the comments
            // documents = await getAllDocuments(client, 'comments', {_id: -1});
            // send response with status of 200 to show successful GET request
            res.status(200).json({comments: documents});
       } catch(error){
        res.status(500).json({message: 'Failed to retrieve comments'})
    
       }
        
    }

     // disconnects from the client 
     client.close();
}

export default handler;